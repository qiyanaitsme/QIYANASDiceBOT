from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import async_session, Room
from keyboards import get_main_keyboard, get_host_keyboard, get_player_keyboard
from utils import generate_room_code, roll_dice
from sqlalchemy import select, or_
from bot_instance import bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

class GameStates(StatesGroup):
    waiting_for_room_code = State()
    waiting_for_password = State()
    in_game = State()

def get_throw_dice_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏", callback_data="throw_dice"))
    return keyboard

async def start_command(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    await bot.send_photo(
        message.chat.id,
        'https://wallpaper-a-day.com/wp-content/uploads/2017/12/tumblr_p0eexyzxtl1u36eloo1_1280.jpg',
        caption=(
            "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –≤ –∫–æ—Å—Ç–∏!\n\n"
            "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å - –ö–ò–ê–ù–ê\n"
            "üåê –§–æ—Ä—É–º - https://lolz.live/kqlol/\n"
        ),
        reply_markup=get_main_keyboard()
    )

async def create_room_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    room_code = generate_room_code()
    user = callback_query.from_user
    
    async with async_session() as session:
        new_room = Room(
            code=room_code,
            player1_id=user.id,
            player1_name=f"{user.first_name} {user.last_name if user.last_name else ''}",
        )
        session.add(new_room)
        await session.commit()
    
    await callback_query.message.answer(
        f"üéØ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {room_code}\n"
        f"–ò–≥—Ä–æ–∫ 1: {new_room.player1_name} (ID: {new_room.player1_id})\n"
        "–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...",
        reply_markup=get_host_keyboard()
    )
    await callback_query.answer()

async def join_room_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await GameStates.waiting_for_room_code.set()
    await callback_query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:")
    await callback_query.answer()

async def process_room_code(message: types.Message, state: FSMContext):
    user = message.from_user
    room_code = message.text.upper()
    
    async with async_session() as session:
        query = select(Room).where(Room.code == room_code, Room.is_active == True)
        result = await session.execute(query)
        room = result.scalar_one_or_none()
        
        if not room:
            await state.finish()
            await message.answer(
                "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
                reply_markup=get_main_keyboard()
            )
            return
            
        if room.player2_id:
            await state.finish()
            await message.answer(
                "‚ùå –ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–Ω–∞—Ç—É.", 
                reply_markup=get_main_keyboard()
            )
            return
        
        room.player2_id = user.id
        room.player2_name = f"{user.first_name} {user.last_name if user.last_name else ''}"
        await session.commit()
        
        game_status = (
            f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n"
            f"–ò–≥—Ä–æ–∫ 1: {room.player1_name}\n"
            f"–ò–≥—Ä–æ–∫ 2: {room.player2_name}\n\n"
            f"–£ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å 3 –ø–æ–ø—ã—Ç–∫–∏ –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏. –£–¥–∞—á–∏! üé≤"
        )
        
        for player_id in [room.player1_id, room.player2_id]:
            await bot.send_message(
                player_id,
                game_status,
                reply_markup=get_throw_dice_keyboard()
            )
            
    await GameStates.in_game.set()

async def throw_dice_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    
    async with async_session() as session:
        query = select(Room).where(
            Room.is_active == True,
            or_(Room.player1_id == user_id, Room.player2_id == user_id)
        )
        result = await session.execute(query)
        room = result.scalar_one_or_none()
        
        if not room:
            await callback_query.answer("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        is_player1 = user_id == room.player1_id
        current_attempts = room.player1_attempts if is_player1 else room.player2_attempts
        
        if current_attempts >= 3:
            await callback_query.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏!", show_alert=True)
            return
        
        dice_value = roll_dice()
        if is_player1:
            room.player1_score += dice_value
            room.player1_attempts += 1
            player_name = room.player1_name
        else:
            room.player2_score += dice_value
            room.player2_attempts += 1
            player_name = room.player2_name
        
        await session.commit()
        
        game_status = (
            f"üé≤ {player_name} –≤—ã–±—Ä–æ—Å–∏–ª: {dice_value}\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç:\n"
            f"{room.player1_name}: {room.player1_score} ({3 - room.player1_attempts} –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å)\n"
            f"{room.player2_name}: {room.player2_score} ({3 - room.player2_attempts} –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å)"
        )
        
        for player_id in [room.player1_id, room.player2_id]:
            await bot.send_message(
                player_id,
                game_status,
                reply_markup=get_throw_dice_keyboard()
            )
        
        if room.player1_attempts == 3 and room.player2_attempts == 3:
            if room.player1_score == room.player2_score:
                result_text = "ü§ù –ù–∏—á—å—è!"
                final_message = (
                    f"üèÜ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\n"
                    f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç:\n"
                    f"{room.player1_name}: {room.player1_score}\n"
                    f"{room.player2_name}: {room.player2_score}\n\n"
                    f"{result_text}"
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
                for player_id in [room.player1_id, room.player2_id]:
                    await bot.send_message(player_id, final_message)
                    await bot.send_photo(
                        player_id,
                        'https://wallpaper-a-day.com/wp-content/uploads/2017/12/tumblr_p0eexyzxtl1u36eloo1_1280.jpg',
                        caption=(
                            "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –≤ –∫–æ—Å—Ç–∏!\n\n"
                            "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å - –ö–ò–ê–ù–ê\n"
                            "üåê –§–æ—Ä—É–º - https://lolz.live/kqlol/\n"
                        ),
                        reply_markup=get_main_keyboard()
                    )
            else:
                winner_id = room.player1_id if room.player1_score > room.player2_score else room.player2_id
                loser_id = room.player2_id if room.player1_score > room.player2_score else room.player1_id
                winner_name = room.player1_name if room.player1_score > room.player2_score else room.player2_name
                
                final_message = (
                    f"üèÜ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\n"
                    f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç:\n"
                    f"{room.player1_name}: {room.player1_score}\n"
                    f"{room.player2_name}: {room.player2_score}\n\n"
                    f"{winner_name}, —Ç—ã –ø–æ–±–µ–¥–∏–ª. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –Ω–µ–π, —É–¥–∞—á–∞ —Å —Ç–æ–±–æ–π!"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –≥–∏—Ñ–∫—É –∏ –º–µ–Ω—é
                await bot.send_message(winner_id, final_message)
                await bot.send_animation(winner_id, 'https://www.gifs.cc/congratulation/congrats-animation-smiley-2018.gif')
                await bot.send_photo(
                    winner_id,
                    'https://wallpaper-a-day.com/wp-content/uploads/2017/12/tumblr_p0eexyzxtl1u36eloo1_1280.jpg',
                    caption=(
                        "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –≤ –∫–æ—Å—Ç–∏!\n\n"
                        "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å - –ö–ò–ê–ù–ê\n"
                        "üåê –§–æ—Ä—É–º - https://lolz.live/kqlol/\n"
                    ),
                    reply_markup=get_main_keyboard()
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é
                await bot.send_message(loser_id, final_message)
                await bot.send_photo(
                    loser_id,
                    'https://wallpaper-a-day.com/wp-content/uploads/2017/12/tumblr_p0eexyzxtl1u36eloo1_1280.jpg',
                    caption=(
                        "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –≤ –∫–æ—Å—Ç–∏!\n\n"
                        "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å - –ö–ò–ê–ù–ê\n"
                        "üåê –§–æ—Ä—É–º - https://lolz.live/kqlol/\n"
                    ),
                    reply_markup=get_main_keyboard()
                )
            
            room.is_active = False
            await session.commit()
            await state.finish()



async def kick_player_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    
    async with async_session() as session:
        query = select(Room).where(Room.player1_id == user_id, Room.is_active == True)
        result = await session.execute(query)
        room = result.scalar_one_or_none()
        
        if not room:
            await callback_query.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –≤—ã–≥–æ–Ω—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤!", show_alert=True)
            return
        
        if room.player2_id:
            kicked_player_name = room.player2_name
            kicked_player_id = room.player2_id
            room.player2_id = None
            room.player2_name = None
            room.player2_score = 0
            room.player2_attempts = 0
            await session.commit()
            
            await callback_query.message.answer(f"üë¢ –ò–≥—Ä–æ–∫ {kicked_player_name} –±—ã–ª –≤—ã–≥–Ω–∞–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã!")
            await bot.send_message(kicked_player_id, "‚ùå –í—ã –±—ã–ª–∏ –≤—ã–≥–Ω–∞–Ω—ã –∏–∑ –∫–æ–º–Ω–∞—Ç—ã!")
        else:
            await callback_query.answer("‚ùå –í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞!", show_alert=True)
